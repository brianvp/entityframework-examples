//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EDMXBasicCRUDSprocs
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BikeStoreEntities : DbContext
    {
        public BikeStoreEntities()
            : base("name=BikeStoreEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Manufacturer> Manufacturers { get; set; }
        public virtual DbSet<Model> Models { get; set; }
        public virtual DbSet<PartNumber> PartNumbers { get; set; }
        public virtual DbSet<Status> Status { get; set; }
    
        public virtual int ModelDelete(Nullable<int> modelID)
        {
            var modelIDParameter = modelID.HasValue ?
                new ObjectParameter("ModelID", modelID) :
                new ObjectParameter("ModelID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModelDelete", modelIDParameter);
        }
    
        public virtual int ModelInsert(ObjectParameter modelId, string name, string manufacturerCode, Nullable<int> categoryId, string description, string features, Nullable<int> statusId, Nullable<int> manufacturerId, Nullable<decimal> listPrice, string imageCollection, string categoryCustomData, string manufacturerCustomData)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var manufacturerCodeParameter = manufacturerCode != null ?
                new ObjectParameter("ManufacturerCode", manufacturerCode) :
                new ObjectParameter("ManufacturerCode", typeof(string));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var featuresParameter = features != null ?
                new ObjectParameter("Features", features) :
                new ObjectParameter("Features", typeof(string));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var manufacturerIdParameter = manufacturerId.HasValue ?
                new ObjectParameter("ManufacturerId", manufacturerId) :
                new ObjectParameter("ManufacturerId", typeof(int));
    
            var listPriceParameter = listPrice.HasValue ?
                new ObjectParameter("ListPrice", listPrice) :
                new ObjectParameter("ListPrice", typeof(decimal));
    
            var imageCollectionParameter = imageCollection != null ?
                new ObjectParameter("ImageCollection", imageCollection) :
                new ObjectParameter("ImageCollection", typeof(string));
    
            var categoryCustomDataParameter = categoryCustomData != null ?
                new ObjectParameter("CategoryCustomData", categoryCustomData) :
                new ObjectParameter("CategoryCustomData", typeof(string));
    
            var manufacturerCustomDataParameter = manufacturerCustomData != null ?
                new ObjectParameter("ManufacturerCustomData", manufacturerCustomData) :
                new ObjectParameter("ManufacturerCustomData", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModelInsert", modelId, nameParameter, manufacturerCodeParameter, categoryIdParameter, descriptionParameter, featuresParameter, statusIdParameter, manufacturerIdParameter, listPriceParameter, imageCollectionParameter, categoryCustomDataParameter, manufacturerCustomDataParameter);
        }
    
        public virtual ObjectResult<Model> ModelSelectByKey(Nullable<int> modelId)
        {
            var modelIdParameter = modelId.HasValue ?
                new ObjectParameter("ModelId", modelId) :
                new ObjectParameter("ModelId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Model>("ModelSelectByKey", modelIdParameter);
        }
    
        public virtual ObjectResult<Model> ModelSelectByKey(Nullable<int> modelId, MergeOption mergeOption)
        {
            var modelIdParameter = modelId.HasValue ?
                new ObjectParameter("ModelId", modelId) :
                new ObjectParameter("ModelId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Model>("ModelSelectByKey", mergeOption, modelIdParameter);
        }
    
        public virtual ObjectResult<ModelSelectFilter_Result> ModelSelectFilter(string name, string manufacturerCode, string categoryName, string description, string features, Nullable<decimal> minListPrice, Nullable<decimal> maxListPrice, string statusName, string manufacturerName)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var manufacturerCodeParameter = manufacturerCode != null ?
                new ObjectParameter("ManufacturerCode", manufacturerCode) :
                new ObjectParameter("ManufacturerCode", typeof(string));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var featuresParameter = features != null ?
                new ObjectParameter("Features", features) :
                new ObjectParameter("Features", typeof(string));
    
            var minListPriceParameter = minListPrice.HasValue ?
                new ObjectParameter("MinListPrice", minListPrice) :
                new ObjectParameter("MinListPrice", typeof(decimal));
    
            var maxListPriceParameter = maxListPrice.HasValue ?
                new ObjectParameter("MaxListPrice", maxListPrice) :
                new ObjectParameter("MaxListPrice", typeof(decimal));
    
            var statusNameParameter = statusName != null ?
                new ObjectParameter("StatusName", statusName) :
                new ObjectParameter("StatusName", typeof(string));
    
            var manufacturerNameParameter = manufacturerName != null ?
                new ObjectParameter("ManufacturerName", manufacturerName) :
                new ObjectParameter("ManufacturerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ModelSelectFilter_Result>("ModelSelectFilter", nameParameter, manufacturerCodeParameter, categoryNameParameter, descriptionParameter, featuresParameter, minListPriceParameter, maxListPriceParameter, statusNameParameter, manufacturerNameParameter);
        }
    
        public virtual int ModelUpdate(Nullable<int> modelId, string name, string manufacturerCode, Nullable<int> categoryId, string description, string features, Nullable<int> statusId, Nullable<int> manufacturerId, Nullable<decimal> listPrice, string imageCollection, string categoryCustomData, string manufacturerCustomData)
        {
            var modelIdParameter = modelId.HasValue ?
                new ObjectParameter("ModelId", modelId) :
                new ObjectParameter("ModelId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var manufacturerCodeParameter = manufacturerCode != null ?
                new ObjectParameter("ManufacturerCode", manufacturerCode) :
                new ObjectParameter("ManufacturerCode", typeof(string));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var featuresParameter = features != null ?
                new ObjectParameter("Features", features) :
                new ObjectParameter("Features", typeof(string));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var manufacturerIdParameter = manufacturerId.HasValue ?
                new ObjectParameter("ManufacturerId", manufacturerId) :
                new ObjectParameter("ManufacturerId", typeof(int));
    
            var listPriceParameter = listPrice.HasValue ?
                new ObjectParameter("ListPrice", listPrice) :
                new ObjectParameter("ListPrice", typeof(decimal));
    
            var imageCollectionParameter = imageCollection != null ?
                new ObjectParameter("ImageCollection", imageCollection) :
                new ObjectParameter("ImageCollection", typeof(string));
    
            var categoryCustomDataParameter = categoryCustomData != null ?
                new ObjectParameter("CategoryCustomData", categoryCustomData) :
                new ObjectParameter("CategoryCustomData", typeof(string));
    
            var manufacturerCustomDataParameter = manufacturerCustomData != null ?
                new ObjectParameter("ManufacturerCustomData", manufacturerCustomData) :
                new ObjectParameter("ManufacturerCustomData", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModelUpdate", modelIdParameter, nameParameter, manufacturerCodeParameter, categoryIdParameter, descriptionParameter, featuresParameter, statusIdParameter, manufacturerIdParameter, listPriceParameter, imageCollectionParameter, categoryCustomDataParameter, manufacturerCustomDataParameter);
        }
    
        public virtual ObjectResult<PartNumberSelectFilter_Result> PartNumberSelectFilter(string modelName, string partNumberName, string manufacturerCode, string inventoryPartNumber, string manufacturerPartNumber, string categoryName, string description, string features, Nullable<decimal> minListPrice, Nullable<decimal> maxListPrice, string statusName, string manufacturerName)
        {
            var modelNameParameter = modelName != null ?
                new ObjectParameter("ModelName", modelName) :
                new ObjectParameter("ModelName", typeof(string));
    
            var partNumberNameParameter = partNumberName != null ?
                new ObjectParameter("PartNumberName", partNumberName) :
                new ObjectParameter("PartNumberName", typeof(string));
    
            var manufacturerCodeParameter = manufacturerCode != null ?
                new ObjectParameter("ManufacturerCode", manufacturerCode) :
                new ObjectParameter("ManufacturerCode", typeof(string));
    
            var inventoryPartNumberParameter = inventoryPartNumber != null ?
                new ObjectParameter("InventoryPartNumber", inventoryPartNumber) :
                new ObjectParameter("InventoryPartNumber", typeof(string));
    
            var manufacturerPartNumberParameter = manufacturerPartNumber != null ?
                new ObjectParameter("ManufacturerPartNumber", manufacturerPartNumber) :
                new ObjectParameter("ManufacturerPartNumber", typeof(string));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var featuresParameter = features != null ?
                new ObjectParameter("Features", features) :
                new ObjectParameter("Features", typeof(string));
    
            var minListPriceParameter = minListPrice.HasValue ?
                new ObjectParameter("MinListPrice", minListPrice) :
                new ObjectParameter("MinListPrice", typeof(decimal));
    
            var maxListPriceParameter = maxListPrice.HasValue ?
                new ObjectParameter("MaxListPrice", maxListPrice) :
                new ObjectParameter("MaxListPrice", typeof(decimal));
    
            var statusNameParameter = statusName != null ?
                new ObjectParameter("StatusName", statusName) :
                new ObjectParameter("StatusName", typeof(string));
    
            var manufacturerNameParameter = manufacturerName != null ?
                new ObjectParameter("ManufacturerName", manufacturerName) :
                new ObjectParameter("ManufacturerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PartNumberSelectFilter_Result>("PartNumberSelectFilter", modelNameParameter, partNumberNameParameter, manufacturerCodeParameter, inventoryPartNumberParameter, manufacturerPartNumberParameter, categoryNameParameter, descriptionParameter, featuresParameter, minListPriceParameter, maxListPriceParameter, statusNameParameter, manufacturerNameParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
